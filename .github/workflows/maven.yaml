# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: project cicd flow

on:
  push:
    branches: [ master ]
#   pull_request:
#     branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
        distribution: 'adopt'
        cache: maven
        
    - name: Build with Maven
      run: mvn clean install
        
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }} # default: index.docker.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - run: |
        docker build . -t ${{ secrets.ACR_USERNAME }}.azurecr.io/k8sdemo:${{ github.sha }}
        docker push ${{ secrets.ACR_USERNAME }}.azurecr.io/k8sdemo:${{ github.sha }}

  deploy:

    runs-on: ubuntu-latest
    needs: build
    steps:
# Set the target AKS cluster.
    - uses: actions/checkout@v2
    
    - uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: myaks
        resource-group: github-actions-rg
        
    - uses: Azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ secrets.ACR_LOGIN_SERVER }}.azurecr.io
        container-registry-username: ${{ secrets.ACR_USERNAME }}
        container-registry-password: ${{ secrets.ACR_PASSWORD }}
        secret-name: k8s-secret

    - uses: Azure/k8s-deploy@v4
      with:
        action: deploy
        manifests: |
          manifests/deployment.yaml
          manifests/service.yaml
        images: |
          ${{ secrets.ACR_USERNAME }}.azurecr.io/k8sdemo:${{ github.sha }}
        imagepullsecrets: |
          k8sdemo
